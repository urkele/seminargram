{
  "name": "mubsub",
  "version": "0.0.2",
  "description": "Pub/sub for Node.js and MongoDB",
  "homepage": "http://github.com/scttnlsn/mubsub",
  "author": {
    "name": "Scott Nelson",
    "email": "scottbnel@gmail.com"
  },
  "main": "./lib/index",
  "keywords": [
    "mongodb",
    "pubsub",
    "pub",
    "sub",
    "capped collection"
  ],
  "contributors": [
    {
      "name": "Oleg Slobodskoi",
      "email": "oleg008@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/scttnlsn/mubsub.git"
  },
  "dependencies": {
    "mongodb": ">= 0.9.9"
  },
  "devDependencies": {
    "mocha": ">= 1.0.0"
  },
  "readme": "mubsub\n======\n\nMubsub is a pub/sub implementation for Node.js and MongoDB.  It utilizes Mongo's capped collections and tailable cursors to notify subscribers of inserted documents that match a given query.\n\nExample\n-------\n\n```javascript\nvar mubsub = require('mubsub');\nvar channel = mubsub.channel('test');\n\nmubsub.connect('mongodb://localhost:27017/mubsub');\n\nchannel.subscribe({ foo: 'bar' }, function(err, doc) {\n    console.log('received bar');\n});\n\nchannel.subscribe({ foo: 'baz' }, function(err, doc) {\n    console.log('received baz');\n});\n\nchannel.publish({ foo: 'bar' });\nchannel.publish({ foo: 'baz' });\n\n```\n\nUsage\n-----\n\n### Channels ###\n\nA channel maps one-to-one with a capped collection (Mubsub will create these if they do not already exist in the database).  Optionally specify the byte size of the collection or/and max number of documents in the collection when creating a channel:\n\n```javascript\nvar channel = mubsub.channel('foo', { size: 100000, max: 500 });\n```\n\n### Subscribe ###\n\n```javascript\nvar subscription = channel.subscribe(query, callback);\n```\n\nSubscriptions register a callback to be called whenever a document matching the specified query is inserted (published) into the collection (channel).  You can omit the query to match all inserted documents.  To later unsubscribe a particular callback, call `unsubscribe` on the returned subscription object:\n\n```javascript\nsubscription.unsubscribe();\n```\n\n### Publish ###\n\n```javascript\nchannel.publish(doc, callback);\n```\n\nPublishing a document simply inserts the document into the channel's capped collection.  Note that Mubsub will remove any specified document `_id` as the natural ordering of `ObjectId`s is used to ensure subscribers do not receive notifications of documents inserted in the past.  Callback is optional.\n\n### Disconnect ###\n\n```javascript\nmubsub.disconnect();\n```\n\nCloses the MongoDB connection.\n\nInstall\n-------\n\n    npm install mubsub\n\nTests\n-----\n\n    make test\n\nYou can optionally specify the MongoDB URI to be used for tests:\n\n    MONGODB_URI=mongodb://localhost:27017/mubsub_tests make test",
  "readmeFilename": "README.md",
  "_id": "mubsub@0.0.2",
  "_from": "mubsub@0.0.2"
}
