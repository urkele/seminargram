{
  "name": "socket.io-mongo",
  "description": "Socket.io store implementation backed by mongodb.",
  "version": "0.0.8",
  "engines": {
    "node": "0.6.x"
  },
  "keywords": [
    "mongodb",
    "socket.io",
    "pubsub"
  ],
  "author": {
    "name": "Oleg Slobodskoi",
    "email": "oleg008@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/kof/socket.io-mongo.git"
  },
  "dependencies": {
    "mubsub": "0.0.2",
    "socket.io": "0.9.x",
    "underscore": "1.3.3"
  },
  "devDependencies": {
    "qunit": "0.5.3",
    "chainer": "0.0.5",
    "argsparser": "0.0.6"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "readme": "## Socket.io store implementation backed by mongodb.\n\nThis store is for people who is already using mongodb and don't want to add redis. Pubsub is implemented via \"mubsub\" module, which is using capped collections and tailable cursors.\n\nAny benches or experiences in comparison to redis are welcome.\n\n### Install\n\nIf \"msgpack\" is installed, it will be used instead of JSON.stringify/parse.\n\n    npm i socket.io-mongo\n\n### Usage example\n\n    var socketio = require('socket.io'),\n        express = require('express'),\n        MongoStore = require('socket.io-mongo'),\n        app = express.createServer(),\n        io = io.listen(app);\n\n    app.listen(8000);\n\n    io.configure(function() {\n        var store = new MongoStore({url: 'mongodb://localhost:27017/yourdb'});\n        store.on('error', console.error);\n        io.set('store', store);\n    });\n\n    io.sockets.on('connection', function (socket) {\n        socket.emit('news', { hello: 'world' });\n        socket.on('my other event', function (data) {\n            console.log(data);\n        });\n    });\n\n### Options\n\n    // Default options\n    {\n        // collection name is prefix + name\n        collectionPrefix: 'socket.io.',\n        // capped collection name\n        streamCollection: 'stream',\n        // collection name used for key/value storage\n        storageCollection: 'storage',\n        // id that uniquely identifies this node\n        nodeId: null,\n        // max size in bytes for capped collection\n        size: 100000,\n        // max number of documents inside of capped collection\n        num: null,\n        // db url e.g. \"mongodb://localhost:27017/yourdb\"\n        url: null,\n        // optionally you can pass everything separately\n        host: 'localhost',\n        port: 27017,\n        db: 'socketio'\n    }\n\n    new MongoStore(options);\n\n### Benchmarks\n\nOn my mb air with locally installed db's, using absolutely the same code, only different storages. Testing pubsub means each event is published and received, testing storage means every key is set, read and deleted.\n\n    node bench --db mongo --test pubsub --amount 50000\n    Testing pubsub , using mongo , amount: 50000 , data: mytestdata\n    pubsub: 5772ms\n\n    node bench --db redis --test pubsub --amount 50000\n    Testing pubsub , using redis , amount: 50000 , data: mytestdata\n    pubsub: 5106ms\n\n    node bench --db mongo --test storage --amount 20000\n    Testing storage , using mongo , amount: 20000 , data: mytestdata\n    storage: 8382ms\n\n    node bench --db redis --test storage --amount 20000\n    Testing storage , using redis , amount: 20000 , data: mytestdata\n    storage: 6224ms\n\n### Run tests\n\n    npm i\n    make test\n\n",
  "readmeFilename": "readme.md",
  "_id": "socket.io-mongo@0.0.8",
  "_from": "socket.io-mongo@"
}
